* 계층 선택자
자식 선택자 : $('h1>a') -> $('h1').children('a')
자손 선택자 : $('h1 span') -> $('h1').find('span')

2번째 li 선택 : $('li:nth-child(2)') -> $('li:nth(1)') -> $('li:eq(1)') -> $('li').eq(1)  ※ nth(인덱스 번호), eq(인덱스 번호) : 인덱스 번호는 0으로 시작함
2번째 li 선택: $('li:nth-of-type(2)') -> $('li:nth(1)') -> $('li:eq(1)') -> $('li').eq(1)                

label 요소를 뒤따르는 input 요소를 선택(lable과 input 사이에 다른 요소가 존재하면 선택하지 않음) : $('label + input') -> $('label').next('input')
label 요소를 뒤따르는 모든 input 요소를 선택 : $('label ~ input') -> $('label').nextAll()

lable 이전의 input 요소를 선택 : $('label').prev('input')
li:nth-child(6) 이전의 모든 li 선택 : $('li').eq(5).prevAll()
li:nth-child(2) 번째의 요소를 제외한 형제요소 모두 선택: $('li').eq(1).siblings()

dd의 부모 선택 : $('dd').parent()
dd의 부모의 부모 선택 : $('dd').parent().parent()
dd의 조상에 해당하는 것 중 아이디 box 선택 : $('dd').parents('#box') 

$('선택자').css('color', 'red'); : CSS 속성 적용 함수
$('선택자').on('click', function(){ 이벤트 코드; });

* 공백없이 클래스끼리 붙어있는 경우 : 클래스 속성 내에 class1과 class2가 모두 설정된 모든 요소를 ​​선택
<div class="class1 class2"></div> 
$('.class1.class2') 


* 자바스크립, 제이쿼리 함수 정리
.keyup() : 누른 키에서 손을 뗄 때 실행
.keydown() : 키보드를 누를 때 실행. 계속 누르고 있는 경우에는 계속 실행 됨(모든 키에 이벤트 반응)
.keypress() : 키보드를 누를 때 실행. 계속 누르고 있는 경우에는 계속 실행 됨(TEXT에 입력이 되지 않는 키에는 이벤트가 반응하지 않음)
.focus() : 대상 요소로 포커스가 이동하면 이벤트를 발생 ex) $("이벤트 대상 선택").focus(function(){ 이벤트 코드; });
.blur() : 대상 요소로 포커스가 해제 될 때 이벤트를 발생
.change() : 해당요소의 value에 변화가 생길 경우 이를 감지하여 등록된 callback함수를 호출하며 주로 input,textarea,select 태그에 동작
.resize() : 윈도우 크기가 바뀔 때 어떤 작업을 할 수 있게 함
.scroll() : 스크롤바가 이동할 때마다 이벤트를 발생
.mouseover() : 선택한 요소에 마우스 포인터를 올릴 때 마다 이벤트를 발생
.mouserout() : 선택한 요소에서 마우스 포인터가 벗어날 때마다 이벤트를 발생
.siblings() : 자신을 제외한 형제 요소들을 찾는 함수
.beforeunload() : 페이지를 벗어나는 경우 이벤트 처리
.window.close() : 현재창 닫기
.attr() : HTML의 속성을 취급 
.prop() : JavaScript 프로파티을 취급 
.show() : display 속성을 block으로 바꿈
.hide() : display 속성을 none으로 바꿈
.trigger() : 강제로 이벤트를 실행(함수 'click, change, focus' 사용)    ex) $("#sGroupCode").val("10").trigger("change"); // select Box 강제 change
.on() : 이벤트 연결(여러게 이벤트 연결 가능)
.off() : .on()함수를 통해 연결된 이벤트 제거
.sort() : 오름차순, 내림차순 정렬(음수일 때 a가 먼저 배치, 양수일 때 b가 먼저 배치)
.repeat(반복횟수) : 문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열을 반환

삼항연산자 : (조건) ? value1 : value2  조건이 참인 경우 value1이 실행, 거짓이면 value2가 실행 
정규표현식.test(매개변수) : 인수로 전달된 문자열(매개변수)에 특정 패턴과 일치하는 문자열이 있는지를 검색하여 일치하면 true, 일치하지 않으면 false로 반환
.ajaxSubmit() : jQuery 플러그, form태그 내부의 데이터를 편하게 비동기 처리해주는 기능, 아작스 url을 action: "url"호출   
                ex) $('#insertForm').ajaxSubmit(option); => <form id="insertForm" action="/rsl/SaveMaidForm_Control.do">
.change() : 셀렉터를 정하여 해당 셀렉터의 값이 변할 경우 이벤트 발생                
.confirm('표시할 문구') : 확인창 띄우는 함수, 선택한 버튼에 따라 논리 값인 참(true) 또는 거짓(false) 값을 반환 
						 ex) if (!confirm("표시할 문구")) {
								// 취소(아니오) 버튼 클릭 시 이벤트
							 }
.getSelectedRowId("gr_List") : 선택 된 셀의 그리드 rowkey를 가져오는 함수
.append() : 현재 대상의 엘리먼트 내에 맨 끝에 새로운 엘리먼트를 추가하는 함수
.appendTo() : 현재 대상의 엘리먼트(이동할 요소)을 타겟위치 안쪽에서 제일 뒤에 추가하는 함수 ex) $(이동할요소).prependTo(이동할 부모요소);
 ※ A.append(B)라면 A에 B를 추가,  A.appendTo(B)는 B에 A를 추가

.prepend() : 현재 대상의 엘리먼트 내에 맨 처음에 새로운 엘리먼트를 추가하는 함수
.remove() : 현재 대상 엘리먼트 자체를 삭제하는 함수
.empty() : 현재 대상 엘리먼트 제외한 하위 자식들을 삭제하는 함수
.mask() : input 입력 패턴 지정 ex) $("#아이디").mask("99:99"); => __:__ 입력 형식 나타남

if(confirm('정말 제출하시겠습니까?'))   
	return true;
else  
	return false;

* 자바 메소드
  1) equals()
  - 문자열이 동일한지 확인 (true, false로 반환)
  - 자바에서 '=='는 문자열 같은지 체크X, object(주소값)가 동일한지를 체크O
  - 객체의 순서를 바꿔도 결과는 동일함
  
  ex) String a = "JAVA"
      String b = "JAVA"
      System.out.println( a.equals(b) );  // true   
      System.out.println( b.equals(c) );  // true   

 2) parseInt
  - String타입의 숫자를 int타입으로 변환해줌

 3) hasNext
 - 읽어올 요소가 남아있는지 확인하는 메서드, 요소가 있으면 true, 없으면 false


* MultipartRequest 메서드
 1) getParameter	
  - request 객체에 있는 지정된 이름의 파라미터 값을 가져옴
 2) getFileNames
  - 파일을 여러개 업로드할 경우 타입이 file인 파라미터 이름들을 Enumeration 타입으로 반환함


* HashMap 인터페이스의 유용한 메서드
 1) put 
  - HashMap에 key-value 관계로 저장
  - key값의 중복이 허용되지 않음(중복된 경우 후에 추가된 key값 저장)

  ex) HashMap<String, Integer> fruits = new HashMap<>();
	  fruits.put("apple", 1);
	  fruits.put("banana", 2);

 2) get
  - 인자로 전달된 key에 해당하는 value를 리턴해 줌
  - key가 존재하지 않으면 null값을 리턴해 줌

  ex) System.out.println(fruits.get("apple")); 결과값 : 1

 3) containsKey
  - Map 에서 인자로 보낸 키가 있으면 true 없으면 false를 반환함
  
  ex) System.out.println(hashMap.containsKey("apple")); 결과값 : true
  


* 공부정리
1. 쌍따옴표, 홑따옴표 : C, JAVA에서 큰따옴표(" ")는 문자열(String)을 감싸는 기호이고, 작은따옴표(' ')는 문자(Character)를 감싸는 기호  
2. for문 foreach문 차이
  1) for문 - 동기방식이므로 에러가 나면 이후의 이벤트들을 동작하지 않고 멈춤
  2) for each문(향상된 for문) - 비동기방식이므로 에러가 발생하더라도 멈추지 않고 동작. 
                               인덱스를 생성하여 for문 보다 수행속도가 빠름. 
                               단점: 반복문 내에서 배열이나 리스트 값을 변경하거나 추가할 수 없다.(읽기 전용으로 불러오기 때문) 
3. 카멜표기법 : int myFirstVariable;
   파스칼표기법 : int MyFirstVariable;
   팟홀표기법 : int my_first_variable;

* 삼항 연산자 : if 문을 간단하게 표현하고 싶을 때 사용
ex) (조건) ? value1 : value2 : 조건이 참인 경우 물음표 바로 다음에 있는 value1이 실행되며, 거짓이면 value2가 실행


* 핀크스 그리드 템플릿 
날짜 : getDatePickerTemplate(true)  true: 필수값, false: 선택값 
숫자 : getNumberTemplate(100, true)
문자 : getStringTemplate(100, true)

* f_Retrieve() url이 없는 경우 => $("#아이디").tuiGrid의 url에 파라미터를 보냄
function f_Retrieve() {
	$("#아이디").setGridParam({
		postData : {											
	  		파라미터 : 파라미터
		}
		,datatype : "json" 
	});
}

* 창 비교
1) alert() : 단순히 메시지 전달 
2) confirm() : 확인 , 취소에 따라 true, false를 반환  
3) prompt() : 알림창에서 사용자가 입력한 값을 받아서 리턴

* =, ==, === 차이
1) = : 대입연산자
2) == : 동등연산자, 강제 형 변환을 수행한 후 값을 비교(느슨한 비교)
3) === : 일치연산자, 강제 형 변환을 수행하지 않음(엄격한 비교)

* attr, prop 차이
.attr() : element가 가지는 정적인 속성값(style, src, rowspan 등)을 조회하거나 세팅하는 경우에 사용
.prop() : element가 가지는 동적인 속성값(disabled, selected, checked 등)을 확인하거나 변경하는 경우에 사용

[문법]
 1. 속성값 가져오기
 .prop(propertyName) : propertyName 속성의 값을 가져옴
 2. 속성값 추가하기 
.prop(propertyName, value) : propertyName 속성에 value 값을 추가

* null, ''(빈값) 차이
1) null : 어떠한 값으로도 초기화 되지 않는 값, 힙 메모리 영역에 존재X 
2) '' : 빈값은 하나의 String, 따라서 메모리 영역에 존재O

* oninput
input 태그 안의 값들이 변경 될때마다 이벤트가 발생

* 함수와 프로시저의 차이 
1) 프로시저 
 매개변수를 입출력 형식으로 받음 
 리턴값을 여러개 가질 수 있음(OUT 여러개)

2) 함수
 입력 형식으로만 받음 
 리턴값을 오직 하나만 가질 수 있음

* Logging(로깅)
프로그램 개발 중이나 완료 후 발생할 수 있는 오류에 대해 디버깅하거나, 
운영 중인 프로그램 상태를 모니터링 하기 위해 필요한 정보(로그)를 기록하는 것

* WAS가 웹브라우져로부터 Servlet요청을 받으면 
1. 요청을 받을 때 전달 받은 정보를 HttpServletRequest객체를 생성하여 저장
2. 웹브라우져에게 응답을 돌려줄 HttpServletResponse객체를 생성(빈 객체)
3. 생성된 HttpServletRequest(정보가 저장된)와 HttpServletResponse(비어 있는)를 Servlet에게 전달

* HttpServletRequest
Http프로토콜의 request 정보를 서블릿에게 전달하기 위한 목적으로 사용
Header정보, Parameter, Cookie, URI, URL 등의 정보를 읽어들이는 메소드를 가진 클래스
Body의 Stream을 읽어들이는 메소드를 가지고 있음

* HttpServletResponse
Servlet은 HttpServletResponse객체에 Content Type, 응답코드, 응답 메시지등을 담아서 전송함

* ModelMap 
- 데이터를 저장한 후 View에서 사용목적
- .addAttribute("키", 값); Model에 데이터를 담을 때 사용

* 스크립트 요소란?
- JSP 페이지에서 자바코드를 사용할 수 있는 영역을 의미

* 스크립트 요소의 종류
1. 선언문(<%! %>) : JSP 페이지에서 변수 및 메소드를 선언할 때 사용 (※ 변수 선언시 전역변수가 됨) 
2. 스크립트릿(<% %>) : 자바 코드를 적을 수 있는 영역 (※ 변수 선언시 지역변수 가 됨)
3. 표현식(<%= %>) : 자바의 변수를 화면에 출력하기 위해 사용되는 영역  

* getParameter() 
- HTTP 요청의 파라미터 값을 얻기 위해 사용
- 폼의 내용들이 바로, HTTP 요청의 파라미터(parameter)가 됨
- 메서드의 경우 String타입을 리턴, 
- 웹브라우저에서 전송받은 request영역의 값을 읽어옴

* ArrayList, List 차이
-  ArrayList는 클래스, 다양한 타입 지원X
, List는 인터페이스,  다양한 타입 지원O,

* JSON
- JavaScript Object Notation의 약자
- Javascript에서 데이터를 전달하기 위해 만들어짐
- "키" : "값" 형태로 데이터를 갖고 있음

* JSONObject
- JSON에서 key-value 쌍으로 데이터를 표현하는 객체
- JSONObject에 데이터를 입력할 때는 put(key, value)으로 입력
- toString()은 JSONObject가 갖고 있는 데이터를 JSON 형식으로 출력합니다.

* PrintWriter
- 출력 스트림

* 콜백함수 
- 정의 : 함수안에 파라미터로 들어가는 함수
- 용도 : 순차적으로 실행하고 싶을 때 씀

* 자바스크립트 연산
- 더하기는 문자열 아닌 것들이 문자로 바뀜 
- 빼기, 나누기, 곱하기는 숫자가 아닌 애들이 숫자로 바뀜

* undefined와 null 차이 
- undefined : 변수를 선언하고 값을 할당하지 않은 상태
- null : 변수를 선언하고 빈 값을 할당한 상태

* 정규식 표현
1) Groups and ranges
- |	: 또는
- () : 그룹화 및 캡쳐(복사), 문자열을 묶음 처리할 때 사용
- (?:) : 캡쳐(복사)하지 않는 그룹화
- [] : 문자셋, 괄호 안에 있는 내용 중 임의의 한 문자 
- [^]	: 부정 문자셋, 괄호 안에 포함되지 않는 한 문자

2) Quantifiers
- ?	: 없거나 있거나(최대 한개만) (zero or one)
- *	: 없거나 있거나(여러개) (zero or more)
- +	: 최소 한개 또는 여러개 (one or more)
- {n(숫자)}	: n번 반복
- {min(숫자),} : 최소
- {min(숫자),max(숫자)}	: 최소, 그리고 최대

3) Boundary-type
- \b : 단어와 단어 사이의 경계	
- \B : 단어 사이의 경계가 아닌 것
- ^	: 문장의 시작
- $	: 문장의 끝

4) Character classes
- \	: ㅇㅇㅇ문자 아닌 특수 문자 ex) \[\] : []검색
- .	: 모든 문자열(숫자, 한글, 영어, 특수기호, 공백 모두. 단, 줄바꿈 문자 제외) 
- \d : 숫자
- \D : 숫자가 아닌 것
- \w : 문자
- \W : 문자 아닌 것
- \s : space 공백
- \S : space 공백 아닌 것

* this
- this는 호출한 놈
- 호출한 놈이 없을 경우에는 기본값으로 window 객체

* window 
 - 브라우저 환경에서 제공
 - 전역객체

* DOM(Document Object Model) 
 - 브라우저 환경에서 제공
 - 스크립트 언어로 html 요소를 제어할 수 있도록 웹문서를 객체확한 것

* $(document).ready()와 $(window).load() 차이점 
 1) $(document).ready()
  - 축약형: $(function(){})  
  - 페이지 로딩이 끝났을 때 실행될 함수를 등록하는 곳
  - DOM 트리만 완성되면 바로 실행
  - window.load() 보다 더 빠르게 실행
  - 중복 사용 가능

 2) $(window).load()
  - 문서의 모든 자원이 다운로드 되었을 때 실행(html의 로딩이 끝난 후에 시작)
  - 오직 하나만 존재해야 함

* 해싱(Hashing)
- 키(Key)값을 해시함수에 대입시켜 나온 결과를 주소로 사용하여 값에 접근하는 방법
- 사용분야 : 1) 자료구조(기억 공간에 저장된 정보를 보다 빠르게 검색하기 위해 절재주소나 상대주소가 아닌 해시테이블을 생성하는 방식), 
            2) 보안(데이터의 위변조를 막기 위해 전자서명이나 보안 알고리즘에 사용)

* 해시함수
- 키(Key)값을 값(Value)이 저장되는 주소 값으로 바꾸기 위한 수식

* SERVICE단
	@Transactional 
	public HashMap<String, Object> PtcMembershipScheduleMngm_Control(HttpServletRequest request) throws Exception {
		HashMap<String, Object> param = RequestUtil.getParameter(request);  // param : {checkArray=[{"키1":"값1","키2":"값2"},{"키3":"값3","키4":"값4"}], data={"키5":"값5","키6":"값6"}}
		
		String gridData = (String) param.get("data");  // gridData : {"키5":"값5","키6":"값6"}

		HashMap<String, Object> sendInfut = CommonUtil.jsonToMap(JSONObject.fromObject(gridData));  // sendInfut : {키5=값5, 키6=값6}
		System.out.println("sendInfut.get(\"type\") : "+sendInfut.get("type")); // sendInfut.get("type") : add
		System.out.println("sendInfut.get(\"type\").toString() : "+sendInfut.get("type").toString()); // sendInfut.get("type").toString() : add
		
		JSONArray timeGrid = CommonUtil.parseGridToJArr(request,"checkArray"); // timeGrid : [{"키1":"값1","키2":"값2"},{"키3":"값3","키4":"값4"}]
	}
	
* JSP태그 : HTML기반의 JSP 코드 내에 JAVA 코드를 삽입할 수 있게 해주는 태그
 1. <%@ %> : 지시자(페이지 속성 지정)
  1) <%@ page %> : 해당 페이지의 전체적인 속성 지정. 주로 사용되는 언어 지정 및 import 문을 많이 사용
  2) <%@ include %> : 별도의 페이지를 현재 페이지에 삽입
  3) <%@ taglib %> : 태그 라이브러리의 태그 사용( ... JSTL 등 사용 )
 2. <%-- --%> : 주석(주석 처리)
 3. <%! %> : 선언(변수,메소드의 선언)
 4. <%= %> : 표현식(결과값 출력)
 5. <% %> : 스크립트릿(JAVA 코드 삽입)
 6. <jsp:action> </jsp:action> : 액션태그(페이지 삽입, 공유, 자바빈 사용등)

* <!DOCTYPE html> 의미
 - DOCTYPE 선언은 HTML 문서가 어떤 버전으로 작성되었는지 브라우저에게 알려주는 역할을 하는 선언문
 - <!DOCTYPE html>는 HTML 5 버전

* HTML <meta> 태그 : 문서의 부가적인 정보를 제공하는 태그 
 예문) /* <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> */
- http-equiv는 문서의 초기정보를 나타내는 속성으로 content 속성에 명시된 정보 또는 값을 HTTP 헤더에 제공
 - Content-Type은 문서의 character encoding을 지정

* 닫는 태그가 없는 태그(태그 내부에 넣을 값이 없으므로)
 - <br>, <img>, <meta>, <link>, <input>, <hr>

 * HTML 정규식 표현
.replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", "");

*빌드란?
 - 프로젝트(소스코드 파일들)를 JVM이나 WAS가 인식할 수 있는 구조로 패킹장하는 과정 및 결과물
 - 빌드도구 : Ant, Maven, Gradle 쓰임

*Maven이란?
 - Maven은 라이브러리를 자동으로 추가 및 관리해주고, 라이브러리 버전을 자동으로 동기화 해줌

*JAR(Java Archive) vs WAR(Web Application Archive)
- JAR, WAR 모두 JAVA의 jar툴을 이용하여 생성된 압축(아카이브)파일

1) JAR : 자바 프로젝트를 압축한 파일, JRE(Java Runtime Environment)만 가지고 실행이 가능, JSP를 지원하지 않음 

2) WAR : 웹 어플리케이션 압축 파일 포맷, WAR파일을 실행하려면 Tomcat 등 웹 서버 또는 WAS(웹 컨테이너)가 필요

* 클릭시 셀렉트 선택/해제 이벤트
  if($(this).hasClass("click")){
      $(this).removeClass("click");
  } else{
      $(this).addClass("click");
  }

* readonly와 disabled 차이
1) readonly
 - 파라미터를 넘길 수 있음
 - select, checkbox, radio에서 사용 불가

2) disabled
 - 파라미터를 넘길 수 없음
 - select, checkbox, radio에서 사용 가능(파라미터 넘기기 위해서 disabled 해제해야 함)

* 톰캣 데이터 사이즈 옵션
전체 게시물 요청의 최대 크기 max-http-form-post-size: -1
요청 본문의 최대 크기 max-swallow-size: -1  


* YYYYMMDD 날짜 포맷으로 반환
1. 함수
function getFormatDate(date){
    var year = date.getFullYear();              //yyyy
    var month = (1 + date.getMonth());          //M
    month = month >= 10 ? month : '0' + month;  //month 두자리로 저장
    var day = date.getDate();                   //d
    day = day >= 10 ? day : '0' + day;          //day 두자리로 저장
    return  year + '' + month + '' + day;       //'-' 추가하여 yyyy-mm-dd 형태 생성 가능
}

2. 자바스크립트
var date = new Date();
date = getFormatDate(date);
