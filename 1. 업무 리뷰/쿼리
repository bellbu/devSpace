--0) PL/SQL 기본형식
DECLARE
	[선언부] - 변수, 상수를 선언
BEGIN
	[실행부] - 제어, 반복문, 함수 등 다양한 로직 기술을 실행
EXCEPTION
	[예외 처리부]
END; [종료부] 

-- 1) CASE사용법
CASE WHEN 조건절 THEN 참일때 값 (ELSE 거짓일때 값) END 컬럼명
-> 여러개
CASE WHEN 조건절1 THEN 참일때 값 
     WHEN 조건절2 THEN 참일때 값
     WHEN 조건절3 THEN 참일때 값  
     ELSE 이 외 조건 일때 값 
END (AS) 컬럼명

* 예문
1)  SELECT ODR_STTUS_CD, CASE WHEN COUNT(ODR_STTUS_CD) > 99 THEN '99+'
                            ELSE TO_CHAR(COUNT(ODR_STTUS_CD))
                        END AS CNT
    FROM TB_LM_ONL_ODR_LST
    WHERE 1=1
    AND DLVY_ENTRPS_CD = :P_DLVY_ENTRPS_CD
    AND TO_CHAR(NVL(UDT_DT,REG_DT),'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
    GROUP BY ODR_STTUS_CD;

2)  UPDATE POA01S SET
                    REAL_UNIT_COST = (CASE WHEN PRICE_TYPE = '001' THEN TO_NUMBER(V_SUM_REAL_UNIT_PRICE) ELSE TO_NUMBER(REAL_UNIT_COST) END),
                    REAL_UNIT_PRICE = (CASE WHEN PRICE_TYPE = '001' THEN TO_NUMBER(ROUND(V_SUM_REAL_UNIT_PRICE * ITEM_CNT)) ELSE TO_NUMBER(REAL_UNIT_PRICE) END),
    WHERE CORP_CODE = P_CORP_CODE
    AND ITEM_CODE = V_MENU_CODE;




-- 2) NVL(Null Value Logic), NVL2 함수
 1) NVL("컬럼명", "지정값") : NULL이 아닌 경우 "원래 컬럼값", NULL인 경우 "지정값" 출력 
 2) NVL2("컬럼명", "지정값1", "지정값2") : NULL이 아닌 경우 "지정값1", NULL인 경우 "지정값2" 출력


-- 3) DECODE
DECODE(컬럼, 조건1, 결과1, 조건2, 결과2, default_result) --조건1에 해당하면 결과1을 반환, 조건2에 해당하면 조건2를 반환. 어느 조건에도 해당되지 않는다면 default_result를 반환 (생략가능 : 생략한다면 null을 반환)

* 예문
SELECT gender, DECODE(gender, 'M', '남자', 'F', '여자', '기타') gender2
FROM temp  

* 예문 결과
GENDER GENDER2
  M     남자
  F     여자
  X     기타


-- 4) TO_CHAR, TO_DATE
1) TO_DATE('날짜처럼 생긴 숫자 또는 문자', '앞 문자의 날짜형식') : 문자열 CHAR를 날짜형 데이터 타입으로 변환 

 * 예문 : TO_DATE('20190418', 'YYYYMMDD')  
 * 결과 : 2019/04/18 


2-1) TO_CHAR(날짜, '원하는 날짜 포맷') : 날짜, 숫자를 원하는 날짜 포맷으로 변환
    
 * 예문 TO_CHAR(20190418, 'YYYY"년" MM"월" DD"일"') 
 * 결과 : 2019년 04월 18일 


2-2) TO_CHAR(숫자열(수치 값), 'FM999,999,999(패턴 값)')

 * 예문 TO_CHAR(1234567890, 'FM999,999,999,999')     
 * 결과 : 1,234,567,890  ※ 단 수치 값 보다 패턴 값의 길이가 작을 경우 값을 반환하지 못함

쿼리에서 형식을 변경해서 뽑아오는 경우 : 엑셀에서 출력한 경우

그리드에서 템플릿을 써서 VIEW를 바꿔지는 경우 : 엑셀 출력이 필요없는 경우


-- 5) SELECT문에 임의 칼럼 추가하기
SELECT '임의값' AS 칼럼명

--6) 조회된 결과 임의번호 매기기
1) ROWNUM
예제) SELECT ROWNUM AS RNUM

2) ROW_NUMBER() 함수

 (1) ORDER BY 된 결과에 순번을 부여
  예제) SELECT ROW_NUMBER() OVER(ORDER BY a.job, a.ename) row_num      
              , a.*   
        FROM emp a  
        ORDER BY a.job, a.ename

 (2) 그룹별(PARTITION)로 순번을 부여
  예제) SELECT ROW_NUMBER() OVER(PARTITION BY a.job ORDER BY a.job, a.ename) row_num      
         , a.*   
        FROM emp a  
        ORDER BY a.job, a.ename

--7) 1~n행 까지 출력 
SELECT LEVEL 
FROM DUAL
CONNECT BY LEVEL <= 10;

-- 8) COUNT 함수 
COUNT(*) : NULL값 포함
COUNT(컬럼명) : NULL값 제외

-- 9) LPAD 함수
LPAD 함수는 지정한 길이만큼 왼쪽부터 특정문자로 채워줌
LPAD("칼럼명", "총 문자길이", "채울문자")

-- 10) || (연결연산자)
여러 개의 문자열을 연결하여 하나의 문자열로 출력

-- 11) LIKE문에서 %, _ (와일드 카드) 
'%'는 글자가 없거나 하나 이상을 의미, '_'는 한 글자를 의미

-- 12) TRUNC(숫자, 소숫점절삭위치)
소숫점절삭위치를 생략하면 소숫점을 전부 잘라 버림
소숫점절삭위치가 음수인 경우 : 소숫점 왼쪽 기준
소숫점절삭위치가 양수인 경우 : 소숫점 오른쪽 기준

-- 13) SUBSTR(대상문자열, 시작위치, 길이)
시작위치 음수를 입력하면 문자의 끝부분부터 뒤로 계산
첫번째 글자 시작위치는 1

-- 14) ROWNUM
조회된 순서대로 순번을 매김
'WHERE ROWNUM = 수' 조건 수 만큼 추출할 경우 순서대로 실행함 (그래서 먼저 정렬(ORDER BY)한 후 추출해야 함)

-- 15) HAVING
GROUP BY로 집계된 값을 조건절로 사용 

-- 16) IN
컬럼에서 값들에 해당되는 행만 조회
값에 해당되지 않는 행을 조회하려면 NOT IN

* 예문: WHERE 컬럼명 IN ('값', '값2')

-- 17) MERGE 
* 문법
MERGE INTO CUSTOMER A : INSERT 또는 UPDATE 될 테이블과 테이블의 ALIAS
USING : 대상 table의 data와 비교한 후 update 또는 insert할 때 사용할 data의 source 
ON : update나 insert할 condition으로, 해당 condition을 만족하는 row가 있으면 WHEN MATCHED 이하를 실행하게 되고, 없으면 WHEN NOT METCHED 이하를 실행
WHEN MATCHED THEN : ON의 조건이 TRUE인 row에 수행할 내용
WHEN NOT MATCHED THEN : ON의 조건에 맞는 row가 없을 때 수행할 내용

* 예문
MERGE INTO CUSTOMER A
USING
(
      SELECT USERNO
           , USERNAME
           , ADDRESS
           , PHONE
       FROM NEW_JOIN
      WHERE INPUT_DATE = '20170724'
) N
ON ( C.USERNO = N.USERNO)
WHEN MATCHED THEN
UPDATE
SET C.USERNAME = N.USERNAME
  , C.ADDRESS  = N.ADDRESS
  , C.PHONE    = N.PHONE
WHEN NOT MATCHED THEN
INSERT ( USERNO
       , USERNAME
       , ADDRESS
       , PHONE
       )
 VALUES (
         N.USERNO
       , N.USERNAME
       , N.ADDRESS
       , N.PHONE
 )


-- 18) DISTINCT
GROUP BY처럼 중복제거
[예문]
SELECT DISTINCT
       a.deptno
     , b.dname
FROM emp a
     , dept b
WHERE a.deptno = b.deptno
AND a.sal > 1500


-- 19) CURSOR
DECLARE

	CURSOR [커서이름] IS [SELECT 구문];

BEGIN

	OPEN [커서이름];

	FETCH [커서이름] INTO [로컬변수];
  
	CLOSE [커서이름];

END;

예문)-- USERVE.PKG_SALEGIFTCARDSALEPOP (SP_GIFT_ALL_UPDATE) 
    DECLARE CURSOR V_LIST IS
    
        SELECT A.CORP_CODE, A.GIFT_CODE, A.GIFT_NO    
        FROM BSA16D A LEFT JOIN RBA01M B ON A.CORP_CODE = B.CORP_CODE  
                                         AND A.GIFT_NO = B.PKG_NO
                      LEFT JOIN (                                               -- 예약일자 체크를 위해 추가 2022-12-22
                                SELECT  
                                    MAX(TOT.CORP_CODE) AS CORP_CODE,
                                    TOT.PKG_CODE,                        
                                    MAX(TOT.RESERV_NO) AS RESERV_NO,                   
                                    CASE WHEN  NVL(MIN(ROOM.CCI_DATE),'99999999') <= NVL(MIN(GOLF.BOOK_DATE),'99999999')
                                            THEN MIN(ROOM.CCI_DATE)
                                            ELSE MIN(GOLF.BOOK_DATE)
                                            END RESERV_DATE,
                                    TO_CHAR(MIN(TOT.INS_DATE),'YYYYMMDD') AS REG_DATE
                                FROM RSA51S TOT 
                                INNER JOIN RSA55S IDX ON (TOT.CORP_CODE = IDX.CORP_CODE AND TOT.RESERV_NO = IDX.RESERV_NO AND IDX.CANCEL_YN = 'N')
                                LEFT JOIN RSC01M ROOM
                                    ON TOT.CORP_CODE = ROOM.CORP_CODE
                                    AND TOT.RESERV_NO = ROOM.RESERV_NO
                                LEFT JOIN RSA50S GOLF
                                    ON TOT.CORP_CODE = GOLF.CORP_CODE
                                    AND TOT.RESERV_NO = GOLF.RESERV_NO
                                WHERE TOT.PKG_CODE IS NOT NULL
                                GROUP BY  TOT.PKG_CODE
                                ) A01 ON A.CORP_CODE = A01.CORP_CODE
                                      AND A.GIFT_NO = A01.PKG_CODE
        --WHERE USE_YN = 'N'      --테스트를 위해서 주석처리(현재 데이터 모두 Y 상태)
        WHERE A.CORP_CODE = P_CORP_CODE 
        AND A.GIFT_CODE = P_GIFT_CODE
        AND (A.GIFT_NO BETWEEN REPLACE(P_GIFT_ST_NO,'-','') AND REPLACE(P_GIFT_ED_NO,'-',''))
        AND (
                (A.GIFT_STATUS <> '5' )
                OR (
                    A.GIFT_STATUS = '5'
--                    AND (NVL(A.USE_AMT,0)) = 0 AND B.CCI_DATE IS NULL
--                    AND CASE WHEN TO_NUMBER(TO_CHAR(SYSDATE,'YYYYMMDD')) < TO_NUMBER(A01.RESERV_DATE) AND B.CCI_DATE IS NULL THEN NVL(A.USE_AMT,0) ELSE 0 END = 0
                    AND B.CCI_DATE IS NULL      --입실일자 존재 시 UPDATE X
                    AND ((A01.RESERV_DATE IS NOT NULL AND TO_NUMBER(TO_CHAR(SYSDATE,'YYYYMMDD')) < TO_NUMBER(A01.RESERV_DATE)) -- 예약일자 존재 시 예약일자보다 현재날짜 작아야됨
                        OR A01.RESERV_DATE IS NULL AND NVL(A.USE_AMT,0) = 0)                                   
                    )
            )
    ;
        
    BEGIN
    
           FOR V_CUR IN V_LIST LOOP
           
            DBMS_OUTPUT.PUT_LINE('V_CUR : ' || V_CUR.GIFT_CODE);

              UPDATE BSA16D A
              SET ( 
                     A.VALID_ST_DATE    
                    ,A.VALID_ED_DATE   
                    ,A.SALES_DIV_CODE  
                    ,A.ADV_COUNT_CODE  
                    ,A.ADV_PAY_CODE    
                    ,A.ONE_TIME_YN     
                    ,A.PROPERTY_TAX_YN 
                    ,A.ONLINE_USE_YN
                    ,A.SALE_MEMO
                    ,A.UPD_EMP_NO      
                    ,A.UPD_DATE        
                    ,A.UPD_IP          
             
              ) = ( SELECT 
                     B.VALID_ST_DATE    
                    ,B.VALID_ED_DATE   
                    ,B.SALES_DIV_CODE  
                    ,B.ADV_COUNT_CODE  
                    ,B.ADV_PAY_CODE    
                    ,B.ONE_TIME_YN     
                    ,B.PROPERTY_TAX_YN
                    ,B.ONLINE_USE_YN
                    ,B.SALE_MEMO 
                    ,B.UPD_EMP_NO      
                    ,B.UPD_DATE        
                    ,B.UPD_IP          
                    FROM BSA16D B
                    WHERE CORP_CODE = P_CORP_CODE
                    AND GIFT_CODE = P_GIFT_CODE
                    AND REPLACE(GIFT_NO,'','-') = REPLACE(P_GIFT_NO,'-','')
                  )     
              WHERE A.CORP_CODE = V_CUR.CORP_CODE
              AND A.GIFT_CODE = V_CUR.GIFT_CODE
              AND A.GIFT_NO = V_CUR.GIFT_NO    
              ;     
            
           END LOOP;
           
    END;   

-- 20) DB 콘솔 찍는법 DBMS_OUTPUT.PUT_LINE(변수명);
DECLARE

       P_CORP_CODE             VARCHAR2(500) := '01';
       P_ST_DATE               VARCHAR2(500) :='20230102';
       P_ED_DATE               VARCHAR2(500) :='20230103';
       P_EMP_NO                VARCHAR2(500) :='3119';  
       P_EMP_IP                VARCHAR2(500)  :='3119';  
       O_RESULT                VARCHAR2(500) :='';    
       O_MSG                   VARCHAR2(500):='';         

                        
BEGIN
            
            O_RESULT := '0'; 
                
            [쿼리문]
           
             O_RESULT := '1';
             
             DBMS_OUTPUT.PUT_LINE('V_DATE_CNT : '||V_DATE_CNT);
END;

--21) NO_DATA_FOUND 예외처리
SELECT INTO 시 데이터가 한 건도 없을 경우

[예문]
FOR I IN 1..V_DATE_CNT
LOOP

    BEGIN
        SELECT RESERV_DATE INTO V_DATE
        FROM(
            SELECT TO_CHAR(TO_DATE(P_ST_DATE,'YYYYMMDD')+I-1,'YYYYMMDD') AS RESERV_DATE,
                    TO_CHAR(TO_DATE(P_ST_DATE,'YYYYMMDD')+I-1, 'D') AS RESERV_DAY        
            FROM DUAL
            )
        WHERE RESERV_DAY = P_RESERV_DAY;
    EXCEPTION                               
        WHEN NO_DATA_FOUND THEN V_DATE := '';
    END;

    CONTINUE WHEN (V_DATE IS NULL OR V_DATE = '');

END LOOP;  

-- 22) CONTINUE문 
반복문 내에서 특정 조건에 부합할 때 처리 로직을 건너뛰고 상단의 루프 조건으로 건너가 루프를 계속 수행할 때 사용,
EXIT는 루프를 완전히 빠져 나오는데 반해, CONTINUE는 제어 범위가 조건절로 넘어감

[예문] 구구단 3단에서 5제외
DECLARE
      vn_base_num NUMBER := 3;
BEGIN
      FOR i IN 1..9
      LOOP
        CONTINUE WHEN i=5;
        DBMS_OUTPUT.PUT_LINE (vn_base_num || '*' || i || '= ' || vn_base_num * i);
      END LOOP;
END;

--23) OVER 함수
GROUP BY나 서브쿼리를 사용하지 않고 집계 함수(SUM, MAX, COUNT 등)를 사용가능 함
OVER() : 전체행
OVER(PARTITION BY 컬럼) : 컬럼그룹내의 행

[예문]
SELECT DEPT_NO
      ,SUM(SAL) OVER(PARTITION BY DEPT_NO ORDER BY SAL) -- PARTITION BY가 GROUP BY 대체
FROM DUAL;


--24) 회사 LIKE 쿼리
WHERE (P_MEM_NO IS NULL OR MEM_NO LIKE '%'|| P_MEM_NO ||'%') => WHERE MEM_NO LIKE '%'|| P_MEM_NO
--SELECT 속도 향상을 위해서 NULL, 뒤에 '%' 제거 권장

--25) ORA-38824: A CREATE OR REPLACE command may not change the EDITIONABLE property of an existing object. 에러 해결법
ALTER PACKAGE 오너.패키지명 NONEDITIONABLE; 
ALTER PROCEDURE 오너.프로시져명 NONEDITIONABLE; 


--26) 주초일자 구하기
SELECT TRUNC(SYSDATE, 'w') AS 매월1일_요일_기준      --매월1일 요일을 기준한 주초일자
      ,TRUNC(SYSDATE, 'ww') AS 매년1월1일_요일_기준  --매년 1월1일 요일을 기준한 주초일자.
      ,TRUNC(SYSDATE, 'iw') AS 월요일_기준
      ,TRUNC(SYSDATE, 'dy') AS 일요일_기준
      ,TRUNC(SYSDATE, 'iw') - 2 AS 항상_전주토요일1
      ,TRUNC(SYSDATE, 'dy') - 1 AS 항상_전주토요일2
FROM DUAL
;

--27) 성능저하
1. 서브쿼리
 - 서브쿼리 사용해야하는 경우 인라인 뷰(성능저하) 지양하고 스칼라 서브쿼리 가능하면 필요한 조건만 검색하는 CASE WHEN 감싸는 스칼라 서브쿼리 지향
 - 스칼라 서브쿼리는 하나의 값만 리턴해야 함
2. 컬럼 가동, 형변환 
 - 인덱스 칼럼인 경우 무용지물이 되어버림 ex) TRIM, SUBSTR, UPPER, TO_CHAR 등 조건으로 셀렉트 하는 경우 <= 이전에 인서트 때 해줘야 함 
3. 인덱스
 - 자주 조회되고 중복도가 낮은 칼럼을 주로 인덱스 설정


-- 28) 실행계획 문법(1번 실행하고 2번 실행)
1)
EXPLAIN PLAN FOR
SELECT *
FROM CRA01M, CRA02M;

2) 
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- 29) null값
오라클은 null값 비교연사자 사용할 수 없으므로 DECODE나 NVL를 사용하여 NULL을 경우 특정 값으로 처리하여 사용하여 사용
 
-- 30) REGEXP_LIKE(정규식 사용)
1) 일반
WHERE (name LIKE '%홍%' OR name LIKE '%김%' OR name LIKE '%서%') 
2) 정규식
WHERE REGEXP_LIKE(name, '홍|김|서')


--31) FETCH 절(원하는 행의 수 반환) 
행의 수를 한정/제한하는 역할로 부분 범위 처리 시에 사용
OFFSET을 통해 시작 위치를 지정하고 FETCH문을 통해 출력 행의 범위를 지정

[예문]
SELECT *
FROM [테이블명]
--OFFSET [행 시작 위치: 기본값 0] ROWS
FETCH FIRST [행의 수] ROW ONLY //지정한 숫자가 없다면 1건만 가져옴

* LAG, LEAD 함수 
- 기본문법
LAG(expr [,offset] [,default]) OVER([partition by clause] order by clause)
LEAD(expr [,offset] [,default]) OVER([partition by clause] order by clause)

LAG 함수 : 이전 행의 값을 리턴
LEAD 함수 : 다음 행의 값을 리턴
expr : 대상 컬럼명
offset : 값을 가져올 행의 위치 기본값은 1, 생략가능
default : 값이 없을 경우 기본값, 생략가능
partition_by_clause : 그룹 컬럼명, 생략가능
order_by_clause : 정렬 컬럼명, 필수

[예문]
SELECT empno
     , job
     , LAG(empno) OVER(ORDER BY empno)  AS empno_prev
     , LEAD(empno) OVER(ORDER BY empno) AS empno_next
  FROM emp 
 WHERE job IN ('MANAGER', 'ANALYST', 'SALESMAN')

--32) CHR(숫자) : 아스키코드값 얻기​
CHR(13) : 현재 라인의 첫 번째 자리에 커서를 위치
CHR(10) : 줄바꿈


--33) WITH 절(오라클9버전 이후부터 사용가능) 
- 가상 테이블 생성할 때 사용
- 긴 문장의 서브 쿼리를 WITH절로 만들어서 SELECT 문의 가독성을 높일 수 있음
- 여러 번 반복되는 서브쿼리를 WITH절로 만들어서 사용하면 쿼리의 성능을 높일 수 있음

[예문] 다중 WITH절
WITH emp_w1 AS
( 
  SELECT deptno
        ,AVG(sal) AS sal_avg
  FROM emp
  GROUP BY deptno
), 
emp_w2 AS 
(
  SELECT job
        ,AVG(sal) AS sal_avg
  FROM emp
  GROUP BY job
)

SELECT a.ename
     , a.job
     , a.sal
     , b.sal_avg AS dept_avg
     , c.sal_avg AS job_avg
FROM emp a
     ,emp_w1 b
     ,emp_w2 c
WHERE a.empno = 7788
AND a.deptno = b.deptno
AND a.job = c.job

--34) EXTRACT 함수
- 일자정보에서 년도, 월, 일과 같은 내용으로 발췌하는 함수
- YEAR : 년도
  MONTH : 월
  DAY : 일
  HOUR : 시간
  MINUTE : 분
  SECOND : 초
  TIMEZONE_HOUR : TIMEZONE형의 시간
  TIMEZONE_MINUTE :TIMEZONE형의 분
  TIMEZONE_REGION : TIMEZONE의 지역
  TIMEZONE_ABBR : TIMEZONE 지역에 대한 약어

[예문]
SELECT EXTRACT(MONTH FROM 날짜칼럼) --월
FROM DUAL;






